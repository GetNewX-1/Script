local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 79) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == 1) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]];
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 51) then
					if (Enum <= 25) then
						if (Enum <= 12) then
							if (Enum <= 5) then
								if (Enum <= 2) then
									if (Enum <= 0) then
										Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
									elseif (Enum > 1) then
										local A = Inst[2];
										Stk[A](Stk[A + 1]);
									else
										local A = Inst[2];
										do
											return Unpack(Stk, A, Top);
										end
									end
								elseif (Enum <= 3) then
									Stk[Inst[2]] = #Stk[Inst[3]];
								elseif (Enum > 4) then
									Stk[Inst[2]] = {};
								else
									Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
								end
							elseif (Enum <= 8) then
								if (Enum <= 6) then
									local A = Inst[2];
									local B = Stk[Inst[3]];
									Stk[A + 1] = B;
									Stk[A] = B[Inst[4]];
								elseif (Enum > 7) then
									if not Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]] = {};
								end
							elseif (Enum <= 10) then
								if (Enum == 9) then
									local A = Inst[2];
									local Index = Stk[A];
									local Step = Stk[A + 2];
									if (Step > 0) then
										if (Index > Stk[A + 1]) then
											VIP = Inst[3];
										else
											Stk[A + 3] = Index;
										end
									elseif (Index < Stk[A + 1]) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								else
									Stk[Inst[2]] = Inst[3] ~= 0;
								end
							elseif (Enum == 11) then
								local A = Inst[2];
								local C = Inst[4];
								local CB = A + 2;
								local Result = {Stk[A](Stk[A + 1], Stk[CB])};
								for Idx = 1, C do
									Stk[CB + Idx] = Result[Idx];
								end
								local R = Result[1];
								if R then
									Stk[CB] = R;
									VIP = Inst[3];
								else
									VIP = VIP + 1;
								end
							else
								Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
							end
						elseif (Enum <= 18) then
							if (Enum <= 15) then
								if (Enum <= 13) then
									Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
								elseif (Enum == 14) then
									Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
								else
									Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
								end
							elseif (Enum <= 16) then
								Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
							elseif (Enum > 17) then
								local A = Inst[2];
								local Results = {Stk[A](Stk[A + 1])};
								local Edx = 0;
								for Idx = A, Inst[4] do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
							end
						elseif (Enum <= 21) then
							if (Enum <= 19) then
								local A = Inst[2];
								local Index = Stk[A];
								local Step = Stk[A + 2];
								if (Step > 0) then
									if (Index > Stk[A + 1]) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								elseif (Index < Stk[A + 1]) then
									VIP = Inst[3];
								else
									Stk[A + 3] = Index;
								end
							elseif (Enum > 20) then
								do
									return;
								end
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum <= 23) then
							if (Enum > 22) then
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Top));
							else
								Stk[Inst[2]] = Stk[Inst[3]] / Stk[Inst[4]];
							end
						elseif (Enum == 24) then
							if Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
						end
					elseif (Enum <= 38) then
						if (Enum <= 31) then
							if (Enum <= 28) then
								if (Enum <= 26) then
									if (Inst[2] < Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum > 27) then
									local A = Inst[2];
									local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
									Top = (Limit + A) - 1;
									local Edx = 0;
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								else
									Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
								end
							elseif (Enum <= 29) then
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
							elseif (Enum > 30) then
								if (Inst[2] < Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								Stk[Inst[2]] = Upvalues[Inst[3]];
							end
						elseif (Enum <= 34) then
							if (Enum <= 32) then
								local A = Inst[2];
								Stk[A] = Stk[A]();
							elseif (Enum > 33) then
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
							else
								Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
							end
						elseif (Enum <= 36) then
							if (Enum > 35) then
								if (Inst[2] == Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								do
									return;
								end
							end
						elseif (Enum > 37) then
							Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
						end
					elseif (Enum <= 44) then
						if (Enum <= 41) then
							if (Enum <= 39) then
								VIP = Inst[3];
							elseif (Enum > 40) then
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Stk[A + 1]));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Stk[A + 1]);
							end
						elseif (Enum <= 42) then
							local A = Inst[2];
							local C = Inst[4];
							local CB = A + 2;
							local Result = {Stk[A](Stk[A + 1], Stk[CB])};
							for Idx = 1, C do
								Stk[CB + Idx] = Result[Idx];
							end
							local R = Result[1];
							if R then
								Stk[CB] = R;
								VIP = Inst[3];
							else
								VIP = VIP + 1;
							end
						elseif (Enum > 43) then
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1][Val[2]] = Value;
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[1] == 104) then
									Indexes[Idx - 1] = {Stk,Mvm[3]};
								else
									Indexes[Idx - 1] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						else
							for Idx = Inst[2], Inst[3] do
								Stk[Idx] = nil;
							end
						end
					elseif (Enum <= 47) then
						if (Enum <= 45) then
							local A = Inst[2];
							local B = Stk[Inst[3]];
							Stk[A + 1] = B;
							Stk[A] = B[Inst[4]];
						elseif (Enum == 46) then
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
						end
					elseif (Enum <= 49) then
						if (Enum == 48) then
							Stk[Inst[2]] = Inst[3];
						else
							Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
						end
					elseif (Enum == 50) then
						if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
							Stk[Inst[2]] = Env;
						else
							Stk[Inst[2]] = Env[Inst[3]];
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]] / Stk[Inst[4]];
					end
				elseif (Enum <= 77) then
					if (Enum <= 64) then
						if (Enum <= 57) then
							if (Enum <= 54) then
								if (Enum <= 52) then
									Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
								elseif (Enum > 53) then
									local A = Inst[2];
									local Step = Stk[A + 2];
									local Index = Stk[A] + Step;
									Stk[A] = Index;
									if (Step > 0) then
										if (Index <= Stk[A + 1]) then
											VIP = Inst[3];
											Stk[A + 3] = Index;
										end
									elseif (Index >= Stk[A + 1]) then
										VIP = Inst[3];
										Stk[A + 3] = Index;
									end
								else
									Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
								end
							elseif (Enum <= 55) then
								Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
							elseif (Enum == 56) then
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Inst[3]));
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 60) then
							if (Enum <= 58) then
								Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
							elseif (Enum == 59) then
								Stk[Inst[2]] = Stk[Inst[3]];
							else
								Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
							end
						elseif (Enum <= 62) then
							if (Enum == 61) then
								Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
							else
								Stk[Inst[2]] = Inst[3];
							end
						elseif (Enum > 63) then
							if (Stk[Inst[2]] == Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Top));
						end
					elseif (Enum <= 70) then
						if (Enum <= 67) then
							if (Enum <= 65) then
								Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
							elseif (Enum > 66) then
								local A = Inst[2];
								Stk[A] = Stk[A]();
							else
								local NewProto = Proto[Inst[3]];
								local NewUvals;
								local Indexes = {};
								NewUvals = Setmetatable({}, {__index=function(_, Key)
									local Val = Indexes[Key];
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value)
									local Val = Indexes[Key];
									Val[1][Val[2]] = Value;
								end});
								for Idx = 1, Inst[4] do
									VIP = VIP + 1;
									local Mvm = Instr[VIP];
									if (Mvm[1] == 104) then
										Indexes[Idx - 1] = {Stk,Mvm[3]};
									else
										Indexes[Idx - 1] = {Upvalues,Mvm[3]};
									end
									Lupvals[#Lupvals + 1] = Indexes;
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
							end
						elseif (Enum <= 68) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						elseif (Enum > 69) then
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						end
					elseif (Enum <= 73) then
						if (Enum <= 71) then
							Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
						elseif (Enum == 72) then
							Stk[Inst[2]]();
						else
							Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
						end
					elseif (Enum <= 75) then
						if (Enum == 74) then
							Stk[Inst[2]] = #Stk[Inst[3]];
						else
							for Idx = Inst[2], Inst[3] do
								Stk[Idx] = nil;
							end
						end
					elseif (Enum > 76) then
						if not Stk[Inst[2]] then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
					end
				elseif (Enum <= 90) then
					if (Enum <= 83) then
						if (Enum <= 80) then
							if (Enum <= 78) then
								Env[Inst[3]] = Stk[Inst[2]];
							elseif (Enum > 79) then
								local A = Inst[2];
								local Results = {Stk[A](Stk[A + 1])};
								local Edx = 0;
								for Idx = A, Inst[4] do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							else
								local A = Inst[2];
								do
									return Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							end
						elseif (Enum <= 81) then
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						elseif (Enum == 82) then
							if ((Inst[3] == "_ENV") or (Inst[3] == "getfenv")) then
								Stk[Inst[2]] = Env;
							else
								Stk[Inst[2]] = Env[Inst[3]];
							end
						elseif (Inst[2] == Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 86) then
						if (Enum <= 84) then
							Env[Inst[3]] = Stk[Inst[2]];
						elseif (Enum > 85) then
							local A = Inst[2];
							do
								return Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						else
							local A = Inst[2];
							local T = Stk[A];
							for Idx = A + 1, Inst[3] do
								Insert(T, Stk[Idx]);
							end
						end
					elseif (Enum <= 88) then
						if (Enum > 87) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
						end
					elseif (Enum > 89) then
						local A = Inst[2];
						local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
						Top = (Limit + A) - 1;
						local Edx = 0;
						for Idx = A, Top do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					else
						local A = Inst[2];
						Stk[A](Stk[A + 1]);
					end
				elseif (Enum <= 97) then
					if (Enum <= 93) then
						if (Enum <= 91) then
							Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
						elseif (Enum > 92) then
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Stk[A + 1]));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						else
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						end
					elseif (Enum <= 95) then
						if (Enum > 94) then
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
						else
							local A = Inst[2];
							local T = Stk[A];
							local B = Inst[3];
							for Idx = 1, B do
								T[Idx] = Stk[A + Idx];
							end
						end
					elseif (Enum == 96) then
						local A = Inst[2];
						Stk[A] = Stk[A](Stk[A + 1]);
					else
						local A = Inst[2];
						local Step = Stk[A + 2];
						local Index = Stk[A] + Step;
						Stk[A] = Index;
						if (Step > 0) then
							if (Index <= Stk[A + 1]) then
								VIP = Inst[3];
								Stk[A + 3] = Index;
							end
						elseif (Index >= Stk[A + 1]) then
							VIP = Inst[3];
							Stk[A + 3] = Index;
						end
					end
				elseif (Enum <= 100) then
					if (Enum <= 98) then
						Stk[Inst[2]] = Inst[3] ~= 0;
					elseif (Enum > 99) then
						if (Stk[Inst[2]] == Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif Stk[Inst[2]] then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum <= 102) then
					if (Enum > 101) then
						local A = Inst[2];
						local T = Stk[A];
						local B = Inst[3];
						for Idx = 1, B do
							T[Idx] = Stk[A + Idx];
						end
					else
						Stk[Inst[2]]();
					end
				elseif (Enum == 103) then
					local A = Inst[2];
					do
						return Unpack(Stk, A, Top);
					end
				else
					Stk[Inst[2]] = Stk[Inst[3]];
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
VMCall("LOL!5A3O0003063O00737472696E6703043O006368617203043O00627974652O033O0073756203053O0062697433322O033O0062697403043O0062786F7203053O007461626C6503063O00636F6E63617403063O00696E7365727403043O007761697403043O0067616D6503083O0049734C6F6164656403073O00506C6179657273030B3O004C6F63616C506C6179657203073O004E65757472616C2O01028O00026O00F03F03073O00B8320D9EBF8A3A03053O00DAEB5779CA027O004003073O0017EFCC539C2C2F03073O005C4786BE32E849030A3O004765745365727669636503113O00021BABD54B5E2D241BBFEA56523E3119BE03073O004C507EDBB9223D030C3O0057616974466F724368696C6403073O003ECB537D6A72E003083O00876CAE3E121E179303063O0095E627C63E9103083O00A7D6894AAB78CE53030C3O00496E766F6B6553657276657203063O00756E7061636B030A3O00412O7461636B4E6F4344030A3O006C6F6164737472696E6703073O00482O7470476574033D3O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F73686C6578776172652F4F72696F6E2F6D61696E2F736F75726365030A3O004D616B6557696E646F7703043O00765F082C03073O0072383E6549478D03073O00534C58F09F8E84030B3O0090E0DFC188FBDEC9B1FCD603043O00A4D889BB0100030A3O00E1E727B785F105D4EF3603073O006BB28651D2C69E030C3O001B018CC0A33F288DCAAE3D1C03053O00CA586EE2A603093O00EC1D8BF8C4F70A91E303053O00AAA36FE297030C3O00383EA62A4112271032BE3D4A03073O00497150D2582E5703073O004D616B6554616203043O00AF2DC01703053O0087E14CAD7203073O003CECAABDA5B3A003073O00C77A8DD8D0CCDD03043O0084DE1FFE03063O0096CDBD70901803173O00726278612O73657469643A2O2F2O34382O3334352O3938030B3O001596BA410D9D1C3F2B88A603083O007045E4DF2C64E87103093O00412O64546F2O676C6503043O00FA1E0AD603073O00E6B47F67B3D61C03053O00AF0D5A55F003073O0080EC653F26842103073O0088AC1745A3E7DB03073O00AFCCC97124D68B03083O0064CD39D00646CF3E03053O006427AC55BC03043O0065D2B54903063O001D2BB3D82C7B030D3O008ED02C49B3CD606DA9CD214FB603043O002CDDB94003073O0025E24E5E660DF303053O00136187283F03083O008D5D3F372D30AD5703063O0051CE3C535B4F030C3O00412O6450617261677261706803053O006CAEDC7B6F03083O00C42ECBB0124FA32D03073O00882E7F0721E9FC03073O008FD8421E7E449B03043O004461746103043O0042656C6903053O0056616C756503053O00737061776E2O033O0053657400D63O0012523O00013O00205F5O0002001252000100013O00205F000100010003001252000200013O00205F000200020004001252000300053O00064D0003000A000100010004273O000A0001001252000300063O00205F000400030007001252000500083O00205F000500050009001252000600083O00205F00060006000A00064200073O000100062O00683O00064O00688O00683O00044O00683O00014O00683O00024O00683O00053O0012520008000B4O00480008000100010012520008000C3O00200600080008000D2O00280008000200020006630008001600013O0004273O001600010012520008000C3O00205F00080008000E00205F00080008000F00205F0008000800100026640008004D000100110004273O004D000100123E000800124O004B000900093O00266400080025000100120004273O002500012O0007000A3O00022O003B000B00073O00123E000C00143O00123E000D00154O0014000B000D0002001051000A0013000B2O003B000B00073O00123E000C00173O00123E000D00184O0014000B000D0002001051000A0016000B2O003B0009000A3O001252000A000C3O002006000A000A00192O003B000C00073O00123E000D001A3O00123E000E001B4O005C000C000E4O0057000A3O0002002006000A000A001C2O003B000C00073O00123E000D001D3O00123E000E001E4O005C000C000E4O0057000A3O0002002006000A000A001C2O003B000C00073O00123E000D001F3O00123E000E00204O005C000C000E4O0057000A3O0002002006000A000A0021001252000C00224O003B000D00094O005D000C000D4O003F000A3O00010004273O004D00010004273O0025000100064200080001000100012O00683O00073O001254000800233O001252000800243O0012520009000C3O00200600090009002500123E000B00264O005C0009000B4O005700083O00022O00200008000100020020060009000800272O0007000B3O00052O003B000C00073O00123E000D00283O00123E000E00294O0014000C000E000200203A000B000C002A2O003B000C00073O00123E000D002B3O00123E000E002C4O0014000C000E000200203A000B000C002D2O003B000C00073O00123E000D002E3O00123E000E002F4O0014000C000E000200203A000B000C00112O003B000C00073O00123E000D00303O00123E000E00314O0014000C000E00022O003B000D00073O00123E000E00323O00123E000F00334O0014000D000F00022O000F000B000C000D2O003B000C00073O00123E000D00343O00123E000E00354O0014000C000E000200203A000B000C002D2O00140009000B0002002006000A000900362O0007000C3O00032O003B000D00073O00123E000E00373O00123E000F00384O0014000D000F00022O003B000E00073O00123E000F00393O00123E0010003A4O0014000E001000022O000F000C000D000E2O003B000D00073O00123E000E003B3O00123E000F003C4O0014000D000F000200203A000C000D003D2O003B000D00073O00123E000E003E3O00123E000F003F4O0014000D000F000200203A000C000D002D2O0014000A000C0002002006000B000A00402O0007000D3O00032O003B000E00073O00123E000F00413O00123E001000424O0014000E001000022O003B000F00073O00123E001000433O00123E001100444O0014000F001100022O000F000D000E000F2O003B000E00073O00123E000F00453O00123E001000464O0014000E0010000200203A000D000E002D2O003B000E00073O00123E000F00473O00123E001000484O0014000E00100002000642000F0002000100012O00683O00074O000F000D000E000F2O0014000B000D0002002006000C000A00402O0007000E3O00032O003B000F00073O00123E001000493O00123E0011004A4O0014000F001100022O003B001000073O00123E0011004B3O00123E0012004C4O00140010001200022O000F000E000F00102O003B000F00073O00123E0010004D3O00123E0011004E4O0014000F0011000200203A000E000F002D2O003B000F00073O00123E0010004F3O00123E001100504O0014000F00110002000247001000034O000F000E000F00102O0014000C000E0002002006000D000A00512O003B000F00073O00123E001000523O00123E001100534O0014000F001100020012520010000C3O0020060010001000192O003B001200073O00123E001300543O00123E001400554O005C001200144O005700103O000200205F00100010000F00205F00100010005600205F00100010005700205F0010001000582O0014000D00100002001252000E00593O000642000F0004000100022O00683O000D4O00683O00074O0059000E00020001002006000E000B005A2O000A001000014O0038000E001000012O00233O00013O00053O00023O00026O00F03F026O00704002264O000700025O00123E000300014O000300045O00123E000500013O0004090003002100012O004400076O003B000800024O0044000900014O0044000A00024O0044000B00034O0044000C00044O003B000D6O003B000E00063O00205B000F000600012O005C000C000F4O0057000B3O00022O0044000C00034O0044000D00044O003B000E00014O0003000F00014O003D000F0006000F00102O000F0001000F2O0003001000014O003D00100006001000102O00100001001000205B0010001000012O005C000D00104O002E000C6O0057000A3O0002002035000A000A00022O005D0009000A4O003F00073O00010004610003000500012O0044000300054O003B000400024O0056000300044O006700036O00233O00017O003F3O00028O00026O00F03F027O004003103O00616374697665436F6E74726F2O6C657203043O0067616D65030A3O004765745365727669636503073O00BBFC3344FDB59803063O00C7EB90523D9803053O006465627567030B3O00676574757076616C75657303073O007265717569726503073O00506C6179657273030B3O004C6F63616C506C61796572030D3O00506C6179657253637269707473030F3O00436F6D6261744672616D65776F726B026O001040030A3O00676574757076616C756503063O00612O7461636B026O001C40024O008A5D2841024O0056342641026O00704203043O006D61746803053O00666C2O6F72026O000840030A3O00736574757076616C7565026O00144003063O00726573756C74023O00E02OFF6F4103093O0043686172616374657203153O0046696E6446697273744368696C644F66436C612O7303043O003319B62703043O004B6776D903113O00F5516018B01DC64075108A0AC8467113BC03063O007EA7341074D903123O00526967436F6E74726F2O6C65724576656E74030A3O0046697265536572766572030C3O00DF2B2190BB17DFC02F2E87B103073O009CA84E40E0D47903083O00746F737472696E6703123O0063752O72656E74576561706F6E4D6F64656C03113O005265706C69636174656453746F7261676503073O0052656D6F74657303093O0056616C696461746F7203113O0035EBB5C20EEDA4DA02EA96DA08FCA4C90203043O00AE678EC52O033O005E214B03073O009836483F58453E034O00026O00184003053O007063612O6C03063O005269674C6962030C3O00676574426C6164654869747303103O0048756D616E6F6964522O6F7450617274026O004E4003053O00706169727303063O00506172656E74030E3O0046696E6446697273744368696C6403103O00FCD1E35DDACBE758E6CBE148E4C5FC4803043O003CB4A48E03053O007461626C6503063O00696E736572742O010004012O00123E3O00014O004B000100073O0026643O0007000100020004273O0007000100205F00030002000300205F00040003000400123E3O00033O0026643O001D000100010004273O001D0001001252000800053O0020060008000800062O0044000A5O00123E000B00073O00123E000C00084O005C000A000C4O005700083O00022O003B000100083O001252000800093O00205F00080008000A0012520009000B3O001252000A00053O00205F000A000A000C00205F000A000A000D00205F000A000A000E00205F000A000A000F2O005D0009000A4O005700083O00022O003B000200083O00123E3O00023O0026643O00C3000100100004273O00C300012O003B000500064O0003000800053O000E1A000100032O0100080004273O00032O0100123E000800014O004B0009000E3O000E2400020033000100080004273O00330001001252000F00093O00205F000F000F001100205F00100004001200123E001100134O0014000F001100022O003B000C000F3O00201B000F000A001400201B0010000900152O0049000F000F00102O003D000D000F000B00201B000E0009001400123E000800033O00266400080040000100030004273O004000012O0034000F000D000B2O0049000F000F000E002035000D000F0016001252000F00173O00205F000F000F00182O00330010000D000B2O0028000F000200022O003B000A000F4O0034000F000A000B2O003C0009000D000F00123E000800193O00266400080051000100190004273O0051000100205B000F000C000200205B000C000F0001001252000F00093O00205F000F000F001A00205F00100004001200123E001100104O003B001200094O0038000F00120001001252000F00093O00205F000F000F001A00205F00100004001200123E0011001B4O003B0012000A4O0038000F0012000100123E000800103O002664000800990001001B0004273O00990001001252000F00173O00205F000F000F00180020110010000D001600201B00100010001D2O0028000F00020002001254000F001C3O001252000F00053O00205F000F000F000C00205F000F000F000D00205F000F000F001E002006000F000F001F2O004400115O00123E001200203O00123E001300214O005C001100134O0057000F3O0002000663000F00032O013O0004273O00032O0100123E000F00013O002664000F0083000100010004273O00830001001252001000053O0020060010001000062O004400125O00123E001300223O00123E001400234O005C001200144O005700103O000200205F0010001000240020060010001000252O004400125O00123E001300263O00123E001400274O0014001200140002001252001300283O00205F00140003000400205F0014001400292O005D001300144O003F00103O0001001252001000053O00205F00100010002A00205F00100010002B00205F00100010002C0020060010001000250012520012001C4O003B0013000C4O003800100013000100123E000F00023O002664000F0066000100020004273O00660001001252001000053O0020060010001000062O004400125O00123E0013002D3O00123E0014002E4O005C001200144O005700103O000200205F0010001000240020060010001000252O004400125O00123E0013002F3O00123E001400304O00140012001400022O003B001300053O00123E001400023O00123E001500314O00380010001500010004273O00032O010004273O006600010004273O00032O01002664000800AC000100100004273O00AC0001001252000F00093O00205F000F000F001A00205F00100004001200123E001100324O003B0012000B4O0038000F00120001001252000F00093O00205F000F000F001A00205F00100004001200123E001100134O003B0012000C4O0038000F00120001001252000F00333O00064200103O000100012O00683O00044O0059000F0002000100123E0008001B3O00266400080025000100010004273O00250001001252000F00093O00205F000F000F001100205F00100004001200123E001100104O0014000F001100022O003B0009000F3O001252000F00093O00205F000F000F001100205F00100004001200123E0011001B4O0014000F001100022O003B000A000F3O001252000F00093O00205F000F000F001100205F00100004001200123E001100324O0014000F001100022O003B000B000F3O00123E000800023O0004273O002500010004273O00032O010026643O00DD000100030004273O00DD00010012520008000B3O001252000900053O00205F00090009002A00205F00090009000F00205F0009000900342O002800080002000200205F000800080035001252000900053O00205F00090009000C00205F00090009000D00205F00090009001E2O0007000A00013O001252000B00053O00205F000B000B000C00205F000B000B000D00205F000B000B001E00205F000B000B00362O005E000A0001000100123E000B00374O00140008000B00022O003B000500084O000700086O003B000600083O00123E3O00193O0026643O0002000100190004273O000200012O000700086O003B000700083O001252000800384O003B000900054O005000080002000A0004273O00FF000100205F000D000C0039002006000D000D003A2O0044000F5O00123E0010003B3O00123E0011003C4O005C000F00114O0057000D3O0002000663000D00FF00013O0004273O00FF000100205F000D000C00392O0022000D0007000D00064D000D00FF000100010004273O00FF000100123E000D00013O002664000D00F3000100010004273O00F30001001252000E003D3O00205F000E000E003E2O003B000F00063O00205F0010000C003900205F0010001000362O0038000E0010000100205F000E000C003900203A0007000E003F0004273O00FF00010004273O00F3000100062A000800E5000100020004273O00E5000100123E3O00103O0004273O000200012O00233O00013O00013O00053O0003053O00706169727303083O00616E696D61746F7203053O00616E696D7303053O00626173696303043O00506C6179000C3O0012523O00014O004400015O00205F00010001000200205F00010001000300205F0001000100042O00503O000200020004273O000900010020060005000400052O005900050002000100062A3O0007000100020004273O000700012O00233O00017O00283O00028O0003073O0067657467656E7603053O00436865737403043O007461736B03043O0077616974026O00F03F03043O0067616D65030A3O004765745365727669636503073O008E77AB8514B87103053O0053CD18D9E0030F3O00526F626C6F7850726F6D7074477569030D3O0070726F6D70744F7665726C6179030E3O0046696E6446697273744368696C64030B3O00C3D7DF32F4F5DF32EBD5D903043O005D86A5AD03063O009DFAC4D12E9D03083O001EDE92A1A25AAED203063O00434672616D6503063O00C6467519F11D03043O006A852E1003063O007B2876EF4E1203063O00203840139C3A03063O0079C0E0454EA003073O00E03AA885363A9203063O007A5E4EEE61D703083O006B39362B9D15E6E703063O00F88314E6AD8D03073O00AFBBEB7195D9BC030A3O006C6F6164737472696E6703073O00482O747047657403483O00682O7470733A2O2F7261772E67697468756275736572636F6E74656E742E636F6D2F4C656F4B686F6C59742F726F626C6F782F6D61696E2F6C6B5F736572766572686F702E6C756103083O0054656C65706F727403073O00506C6163654964027O004003093O000BA09347F069793FAA03073O00185CCFE12C831903073O00506C6179657273030B3O004C6F63616C506C6179657203093O0043686172616374657203103O0048756D616E6F6964522O6F745061727401943O00123E000100013O00266400010001000100010004273O00010001001252000200024O0020000200010002001051000200033O001252000200033O0006630002009300013O0004273O00930001001252000200043O00205F0002000200052O00200002000100020006630002009300013O0004273O0093000100123E000200014O004B000300053O00266400020068000100060004273O00680001001252000600073O0020060006000600082O004400085O00123E000900093O00123E000A000A4O005C0008000A4O005700063O000200205F00060006000B00205F00060006000C00200600060006000D2O004400085O00123E0009000E3O00123E000A000F4O005C0008000A4O005700063O00022O003B000500063O00200600060003000D2O004400085O00123E000900103O00123E000A00114O005C0008000A4O005700063O00020006630006003300013O0004273O0033000100200600060003000D2O004400085O00123E000900133O00123E000A00144O005C0008000A4O005700063O000200205F0006000600120010510004001200060004273O0067000100200600060003000D2O004400085O00123E000900153O00123E000A00164O005C0008000A4O005700063O00020006630006004400013O0004273O0044000100200600060003000D2O004400085O00123E000900173O00123E000A00184O005C0008000A4O005700063O000200205F0006000600120010510004001200060004273O0067000100200600060003000D2O004400085O00123E000900193O00123E000A001A4O005C0008000A4O005700063O00020006630006005500013O0004273O0055000100200600060003000D2O004400085O00123E0009001B3O00123E000A001C4O005C0008000A4O005700063O000200205F0006000600120010510004001200060004273O0067000100123E000600014O004B000700073O00266400060057000100010004273O005700010012520008001D3O001252000900073O00200600090009001E00123E000B001F4O005C0009000B4O005700083O00022O00200008000100022O003B000700083O002006000800070020001252000A00073O00205F000A000A00212O00380008000A00010004273O006700010004273O0057000100123E000200223O0026640002007F000100220004273O007F00010006630005000600013O0004273O0006000100123E000600014O004B000700073O0026640006006E000100010004273O006E00010012520008001D3O001252000900073O00200600090009001E00123E000B001F4O005C0009000B4O005700083O00022O00200008000100022O003B000700083O002006000800070020001252000A00073O00205F000A000A00212O00380008000A00010004273O000600010004273O006E00010004273O0006000100266400020010000100010004273O00100001001252000600073O0020060006000600082O004400085O00123E000900233O00123E000A00244O005C0008000A4O005700063O00022O003B000300063O001252000600073O00205F00060006002500205F00060006002600205F00060006002700205F00040006002800123E000200063O0004273O001000010004273O000600010004273O009300010004273O000100012O00233O00017O00063O00028O0003073O0067657467656E7603063O00412O7461636B03043O007461736B03043O007761697403053O00737061776E01153O00123E000100013O00266400010001000100010004273O00010001001252000200024O0020000200010002001051000200033O001252000200033O0006630002001400013O0004273O00140001001252000200043O00205F0002000200052O00200002000100020006630002001400013O0004273O00140001001252000200063O00024700036O00590002000200010004273O000600010004273O001400010004273O000100012O00233O00013O00013O00013O0003053O007063612O6C00043O0012523O00013O00024700016O00593O000200012O00233O00013O00013O00013O00030A3O00412O7461636B4E6F434400033O0012523O00014O00483O000100012O00233O00017O000C3O0003043O007461736B03043O00776169740200A04O99B93F2O033O0053657403043O0067616D65030A3O004765745365727669636503073O009AC40CD2C0B1C403083O0081CAA86DABA5C3B7030B3O004C6F63616C506C6179657203043O004461746103043O0042656C6903053O0056616C756500163O0012523O00013O00205F5O000200123E000100034O00283O000200020006633O001500013O0004273O001500012O00447O0020065O0004001252000200053O0020060002000200062O0044000400013O00123E000500073O00123E000600084O005C000400064O005700023O000200205F00020002000900205F00020002000A00205F00020002000B00205F00020002000C2O00383O000200010004275O00012O00233O00017O00", GetFEnv(), ...);
